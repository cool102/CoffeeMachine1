type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n\n    static boolean powerbutton = true;\n    private static int water =\
    \ 400;\n    private static int milk = 540;\n    private static int coffee = 120;\n\
    \    private static int cups = 9;\n    private static int money = 550;\n    private\
    \ static Scanner scanner;\n\n    public static void main(String[] args) {\n\n\n\
    \        while (powerbutton) {\n            scanner = new Scanner(System.in);\n\
    \n            System.out.println(\"Write action (buy, fill, take, remaining, exit):\
    \ \");\n\n            Scanner scanner = new Scanner(System.in);\n            String\
    \ action = scanner.next();\n            switch (action) {\n                case\
    \ \"buy\":\n                    buyMethod();\n                    break;\n   \
    \             case \"fill\":\n                    fillMethod();\n            \
    \        break;\n                case \"take\":\n                    takeMethod();\n\
    \                    break;\n                case \"remaining\":\n           \
    \         remain();\n                    break;\n                case \"exit\"\
    :\n                    powerOff();\n                    break;\n             \
    \   default:\n                    throw new IllegalStateException(\"Недопустим\
    ая функция\");\n            }\n        }\n    }\n\n    /**\n     * Выключить к\
    офеварку\n     */\n    private static void powerOff() {\n        powerbutton =\
    \ false;\n\n    }\n\n    /**\n     * посмотреть ресурсы кофеварки\n     */\n \
    \   private static void remain() {\n        System.out.println(\"The coffee machine\
    \ has:\");\n        System.out.printf(\"%d ml of water\\n\", water);\n       \
    \ System.out.printf(\"%d ml of milk\\n\", milk);\n        System.out.printf(\"\
    %d g of coffee beans\\n\", coffee);\n        System.out.printf(\"%d disposable\
    \ cups\\n\", cups);\n        System.out.printf(\"$%d of money\\n\", money);\n\n\
    \    }\n\n\n    /**\n     * Могу или не могу сделать хотяб 1 чашку  выбранного\
    \ кофе \n     * @param waterChange\n     * @param milkChange\n     * @param coffeeChange\n\
    \     * @param cupsChange\n     * @return\n     */\n    public static boolean\
    \ canDo(int waterChange, int milkChange,\n                                int\
    \ coffeeChange, int cupsChange) {\n        if ((water - waterChange) < 0 ||\n\
    \                ((milk - milkChange) < 0) ||\n                (coffee - coffeeChange)\
    \ < 0 ||\n                (cups - cupsChange) < 0) {\n            return false;\n\
    \        } else return true;\n    }\n\n    /**\n     * Внутренняя логика измен\
    ения количества ресурсов\n     * @param typeOfChange\n     * @param waterChange\n\
    \     * @param milkChange\n     * @param coffeeChange\n     * @param cupsChange\n\
    \     * @param moneyChange\n     */\n    private static void changeState(String\
    \ typeOfChange, int waterChange, int milkChange,\n                           \
    \         int coffeeChange, int cupsChange, int moneyChange) {\n        switch\
    \ (typeOfChange) {\n            case \"buy\":\n                sellOrSayICant(waterChange,\
    \ milkChange,\n                        coffeeChange, cupsChange, moneyChange);\n\
    \                break;\n            case \"fill\":\n                fillCoffeeMachine(waterChange,\
    \ milkChange,\n                        coffeeChange, cupsChange, moneyChange);\n\
    \                break;\n            case \"take\":\n                takeAllMoney();\n\
    \                break;\n        }\n\n    }\n\n    private static void fillCoffeeMachine(int\
    \ waterChange, int milkChange,\n                                          int\
    \ coffeeChange, int cupsChange, int moneyChange) {\n        fillProcedure(waterChange,\
    \ milkChange, coffeeChange, cupsChange);\n\n    }\n\n    private static void fillProcedure(int\
    \ waterChange, int milkChange, int coffeeChange, int cupsChange) {\n        water\
    \ = water + waterChange;\n        milk = milk + milkChange;\n        coffee =\
    \ coffee + coffeeChange;\n        cups = cups + cupsChange;\n    }\n\n\n    private\
    \ static void takeAllMoney() {\n        money = 0;\n    }\n\n    private static\
    \ void sellOrSayICant(int waterChange, int milkChange, int coffeeChange, int cupsChange,\
    \ int moneyChange) {\n        if (canDo(waterChange, milkChange,\n           \
    \     coffeeChange, cupsChange)) {\n            buyingProcedure(waterChange, milkChange,\
    \ coffeeChange, cupsChange, moneyChange);\n            System.out.println(\"I\
    \ have enough resources, making you a coffee!\");\n        } else {\n        \
    \    apologiesProcedure(waterChange, milkChange, coffeeChange, cupsChange);\n\
    \        }\n    }\n\n    private static void apologiesProcedure(int waterChange,\
    \ int milkChange, int coffeeChange, int cupsChange) {\n        int tempWater =\
    \ water - waterChange;\n        if (tempWater < 0) {\n            System.out.println(\"\
    Sorry, not enough water!\");\n        }\n        int tempMilk = milk - milkChange;\n\
    \        if (tempMilk < 0) {\n            System.out.println(\"Sorry, not enough\
    \ milk\");\n        }\n        int tempCoffee = coffee - coffeeChange;\n     \
    \   if (tempCoffee < 0) {\n            System.out.println(\"Sorry, not enough\
    \ coffee\");\n        }\n        int tempCups = cups - cupsChange;\n        if\
    \ (tempCups < 0) {\n            System.out.println(\"Sorry, not enough cups\"\
    );\n        }\n    }\n\n    private static void buyingProcedure(int waterChange,\
    \ int milkChange, int coffeeChange, int cupsChange, int moneyChange) {\n     \
    \   water = water - waterChange;\n        milk = milk - milkChange;\n        coffee\
    \ = coffee - coffeeChange;\n        cups = cups - cupsChange;\n        money =\
    \ money + moneyChange;\n    }\n\n\n    private static void buyMethod() {\n   \
    \     System.out.println(\"What do you want to buy? 1 - espresso, 2 - latte, 3\
    \ - cappuccino:\");\n        String coffeType = scanner.next();\n\n        switch\
    \ (coffeType) {\n            case \"1\":\n                changeState(\"buy\"\
    , 250, 0, 16, 1, 4);\n                break;\n            case \"2\":\n      \
    \          changeState(\"buy\", 350, 75, 20, 1, 7);\n                break;\n\
    \            case \"3\":\n                changeState(\"buy\", 200, 100, 12, 1,\
    \ 6);\n                break;\n        }\n\n    }\n\n    private static void fillMethod()\
    \ {\n        System.out.println(\"Write how many ml of water you want to add:\
    \ \");\n        int waterAdded = scanner.nextInt();\n\n        System.out.println(\"\
    Write how many ml of milk you want to add: \");\n        int milkAdded = scanner.nextInt();\n\
    \n        System.out.println(\"Write how many grams of coffee beans you want to\
    \ add: \");\n        int beansAdded = scanner.nextInt();\n\n        System.out.println(\"\
    Write how many disposable cups of coffee you want to add:  \");\n        int cupsAdded\
    \ = scanner.nextInt();\n\n        changeState(\"fill\", waterAdded, milkAdded,\
    \ beansAdded, cupsAdded, 0);\n\n    }\n\n    private static void takeMethod()\
    \ {\n        System.out.printf(\"I gave you $%d\\n\", money);\n        changeState(\"\
    take\", 0, 0, 0, 0, 0);\n    }\n\n\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5334#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 17 Dec 2021 04:49:58 UTC
record: 2
